@page "/"
@using System.IO
@using System.Diagnostics
@inject IJSRuntime js

<div class="container-fluid">
  <div class="row">
    <div class="col-sm">
      One of three columns
    </div>
    <div class="col-sm">
        <MatButton OnClick="@NewFile">New</MatButton>
		<MatButton style="position:relative">Upload<MatFileUpload OnChange="@UploadFile" AllowMultiple="false" style="width:100%;height:1%;opacity:0;position:absolute" Label=""></MatFileUpload></MatButton>
        <MatButton OnClick="@SaveFile">Save</MatButton>
        <MatButton OnClick="@ValidateContent">Validate</MatButton>
        <MatButton OnClick="@RenderContent">Render</MatButton>
        <br />
		<div id="code-editor">
			<MonacoEditor @ref="_editor" Id="code-editor" ConstructionOptions="EditorConstructionOptions" />
		</div>
    </div>
  </div>
</div>


@code {
    private MonacoEditor _editor { get; set; }
    private string defaultEditorText = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
 
    void NewFile(MouseEventArgs e) {
        _editor.SetValue(defaultEditorText);
    }

    void ValidateContent(MouseEventArgs e) {

    }

    void RenderContent(MouseEventArgs e) {

    }

    async void SaveFile(MouseEventArgs e) {
        var bytes = System.Text.Encoding.UTF8.GetBytes(await _editor.GetValue());
        await FileUtil.SaveAs(js, "DasForms.xml", bytes);
    }

    async Task UploadFile(IMatFileUploadEntry[] files) {
        try {
            var file = files.FirstOrDefault();
            if (file == null) {
                return;
            }
 
            using (var stream = new MemoryStream()) {
                await file.WriteToStreamAsync(stream);
                stream.Seek(0, SeekOrigin.Begin);
                using (var reader = new StreamReader(stream)) {
                    await _editor.SetValue(await reader.ReadToEndAsync());
                }
            }
        } catch (Exception e) {
            Console.WriteLine("Error while uploading file!" + $"Error:\n{e.Message}\n{e.StackTrace}");
            await _editor.SetValue($"Error:\n{e.Message}\n{e.StackTrace}");
        } finally {
            await InvokeAsync(StateHasChanged);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
	{
		return new StandaloneEditorConstructionOptions
		{
			Language = "xml",
			Value = defaultEditorText,
            ScrollBeyondLastLine = false
		};
	}
}