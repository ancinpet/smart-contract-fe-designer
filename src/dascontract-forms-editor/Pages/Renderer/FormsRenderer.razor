@using System.Xml.Serialization
@using System.IO
@using System.Xml
@using dascontract_forms_editor.Pages.Renderer.Forms

<br />
<CascadingValue Value="@contract">
    <DContracts></DContracts>
</CascadingValue>


@code {
    DContract contract;

    public void renderModel(string textContent) {
        contract = new DContract();
        InvokeAsync(StateHasChanged);
        using (TextReader reader = new StringReader(textContent)) {
            XmlSerializer serializer = create_throwing_serializer();
            XmlReader xmlreader = new XmlTextReader(reader);
            try {
                contract = (DContract)serializer.Deserialize(xmlreader);
            } catch (Exception e) {
                Console.WriteLine("Error parsing XML!\n" + $"Error:\n{e.Message}\n{e.StackTrace}");
                return;
            }
        }
        InvokeAsync(StateHasChanged);
    }

    public bool validModel(string textContent) {
        using (TextReader reader = new StringReader(textContent)) {
            try {
                XmlSerializer serializer = create_throwing_serializer();
                XmlReader xmlreader = new XmlTextReader(reader);
                DContract contract = (DContract)serializer.Deserialize(xmlreader);
                return contract != null;
            } catch (Exception e) {
                Console.WriteLine("Error parsing XML!\n" + $"Error:\n{e.Message}\n{e.StackTrace}");
                return false;
            }
        }
    }

    private void Serializer_Throw(object sender, XmlElementEventArgs e) {
        throw new Exception("XML format exception.");
    }
    private void Serializer_Throw(object sender, XmlAttributeEventArgs e) {
        throw new Exception("XML format exception.");
    }
    private void Serializer_Throw(object sender, XmlNodeEventArgs e) {
        throw new Exception("XML format exception.");
    }
    private XmlSerializer create_throwing_serializer() {
        XmlSerializer serializer = new XmlSerializer(typeof(DContract));
        serializer.UnknownAttribute += new XmlAttributeEventHandler(Serializer_Throw);
        serializer.UnknownElement += new XmlElementEventHandler(Serializer_Throw);
        serializer.UnknownNode += new XmlNodeEventHandler(Serializer_Throw);
        return serializer;
    }
}